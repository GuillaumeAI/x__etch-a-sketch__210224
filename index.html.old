<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<title>Etch-A-Sketch</title>
	<link href="style.css" rel="stylesheet" type="text/css">
	<link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700,900|Satisfy" rel="stylesheet">
	<script src="script.js" type="text/javascript" async></script>
</head>

<body>
	<div id="maincontainer">
		<div id="top">
			<button id="hover">Hover</button>
			<button id="header"><h1>Etch-A-Sketch</h1></button>
			<button id="drag">Drag</button>
		</div>
		<div id="gridcontainer">
		</div>
		<div id="bottombuttons">
			<button id="clear">Clear</button>
			<button id="default">Default</button>
			<button id="transparent">Transparent</button>
			<button id="colorized">Colorized</button>
			<button id="resize">Resize</button>
			<button id="inference" onclick="startingTheWholeThing()">Inference</button>
		</div>
	</div>
	<footer id="footer">
		<p id="codedby">Coded by Ben Smyth, &copy; 2018.</p>
		<p id="visitme"><a href="https://github.com/benjsmyth" target="_blank">Visit me on Github!</a></p>
	</footer>


	



<br>
<hr>
 
 <script type="text/javascript">
	 document.getElementById("hover").click(); 
	 document.getElementById("default").click();
	 document.getElementById("hover").click(); 
 </script>

  <!-- @STCGoal Capture Canvas from an HTML Elements -->
 <script type="text/javascript" src="/html2canvas/dist/html2canvas.js"></script>

 <!-- @STCGoal So we dont publish on the web our config like pika_token -->
 <script type="text/javascript" src="/config.js"></script>
 
 
 <!-- @STCGoal Render Stylistic inferences via hosted AI model -->
 <script src="https://cdn.jsdelivr.net/npm/@runwayml/hosted-models@latest/dist/hosted-models.js"></script>
 
 <!-- @STCGoal Logic doing all the work -->
 <script type="text/javascript">

var timeOutBeforeProcessing = 11111;
var doProcess = true;
//maincontainer
//
var htmlIdSource = "gridcontainer";// the html id that we capture, convert as image and send to the Pika agent which will send us back our stylized image.
//
var frame = document.getElementById(htmlIdSource);
var rect = frame.getBoundingClientRect();

var WHFixOffset = 150;
var fixWidth = rect.width +WHFixOffset;
var fixHeight = rect.height +WHFixOffset;
var options = {
	scrollX: 80,
		scrollY:  77,
		width: fixWidth + 25,
		height: fixHeight
};


setTimeout(() => { 
console.log("Starting the whole thing!"); 
//startingTheWholeThing();
}, timeOutBeforeProcessing);

function startingTheWholeThing(){

    html2canvas(frame,options).then(function(canvas) {
        document.body.appendChild(canvas);
       // document.appendChild("<hr>");
        var enc64 = imgToBase64(canvas);
       // console.log(enc64);
       //@STCStatus We have an encoded grabbed capture
       //----------------------------------------------
       
       //----------------------------------------------
       //@STCGoal posting to our hosted Pika model on the cloud
    const model = new rw.HostedModel({
        url: pika_url,
        token: pika_token,
    });
    //// You can use the info() method to see what type of input object the model expects
    model.info().then(info => console.log(info));
    const inputs = {
        "contentImage": enc64
    };
		if (doProcess){
			model.query(inputs).then(outputs => {
					const { stylizedImage } = outputs;
					console.log('-------Runway stylized:');
					console.log(stylizedImage);
					var image = new Image();
					image.src= stylizedImage;
					document.body.appendChild(image);
					// use the outputs in your project
    });
	}
	else {
		console.log("-------- DISABLED WARNING-----");
		console.log("-- Processing style is disabled, set doProcess = true to enable");
	}
    
});

console.log("ending the whole thing");
}
//----------------------------------------------

   function imgToBase64(img) {
       const canvas = document.createElement('canvas');
       const ctx = canvas.getContext('2d');
       canvas.width = img.width;
       canvas.height = img.height;

       // I think this won't work inside the function from the console
       img.crossOrigin = 'anonymous';

       ctx.drawImage(img, 0, 0);

       return canvas.toDataURL();
}

</script>

</body>

</html>
